@page "/questions/{QuestionnaireId:int}"
@using HealthQues.DTOs

<PageTitle>Manage Questions</PageTitle>

<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">Questions</h1>
    <button class="btn btn-sm btn-success shadow-sm" @onclick="() => AddQuestion()">
        <i class="fas fa-plus fa-sm"></i>  Add New Question
    </button>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Compose Question</h6>
            </div>
            <div class="card-body">
                <EditForm id="@QuestionFormID" Model="@questionDto" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <label for="@questionDto.Title" class="form-label">Title</label>
                                <InputText class="form-control" @bind-Value="questionDto.Title" />
                                <ValidationMessage For="@(() => questionDto.Title)" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="mb-3">
                                <button class="btn btn-sm btn-success shadow-sm" @onclick="() => AddAnswer()">
                                    <i class="fas fa-plus fa-sm"></i>  Add Answer
                                </button>
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-primary">Submit</button>
                </EditForm>

                <div class="row">
                    @foreach (var item in questionDto.Answers)
                    {
                        <div class="col-md-12 mb-2">

                            <div class="card shadow mb-4">
                                <div class="card-header py-3">
                                    <h6 class="m-0 font-weight-bold text-primary">Answer</h6>
                                </div>
                                <div class="card-body">
                                    <EditForm Model="@item">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary />
                                        <div class="row">
                                            <div class="col-md-12">
                                                <div class="mb-3">
                                                    <label for="@item.Title" class="form-label">Title</label>
                                                    <InputText class="form-control" @bind-Value="item.Title" />
                                                    <ValidationMessage For="@(() => item.Title)" />
                                                </div>
                                            </div>
                                        </div>
                                    </EditForm>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="card-footer">
                <button type="submit" form="@QuestionFormID" class="btn btn-primary">Save</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int QuestionnaireId { get; set; }

    private string QuestionFormID = "QuestionFormID";

    private QuestionDto questionDto = new();

    protected override async Task OnParametersSetAsync()
    {
        questionDto.QuestionnaireId = QuestionnaireId;
        await Task.Delay(100);
    }

    protected override async Task OnInitializedAsync()
    {
        questionDto.Answers = new List<AnswerDto>();
        await Task.Delay(100);
    }

    public async void AddQuestion()
    {
        await Task.Delay(100);
    }

    public async void AddAnswer()
    {
        var ans = new AnswerDto();

        questionDto.Answers.Add(ans);
        await Task.Delay(100);
    }

    private async void HandleValidSubmit()
    {
        await Task.Delay(100);
    }

}